# Generated by Django 3.2.20 on 2024-05-07 11:39

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import zuperscore.db.models.library


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('id', models.BigAutoField(primary_key=True, serialize=False, unique=True)),
                ('username', models.CharField(max_length=128, unique=True)),
                ('mobile_number', models.CharField(blank=True, max_length=255, null=True)),
                ('email', models.CharField(max_length=255, unique=True)),
                ('first_name', models.CharField(blank=True, max_length=255)),
                ('last_name', models.CharField(blank=True, max_length=255)),
                ('about', models.TextField(blank=True)),
                ('profile_img', models.TextField(blank=True)),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('class_start_date', models.DateField(null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('last_location', models.CharField(blank=True, max_length=255)),
                ('created_location', models.CharField(blank=True, max_length=255)),
                ('is_superuser', models.BooleanField(default=False)),
                ('is_managed', models.BooleanField(default=False)),
                ('is_password_expired', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_email_verified', models.BooleanField(default=False)),
                ('is_password_autoset', models.BooleanField(default=False)),
                ('token', models.CharField(blank=True, max_length=64)),
                ('role', models.CharField(choices=[('admin', 'Admin'), ('user', 'User'), ('tutor', 'Tutor'), ('typist', 'Typist'), ('manager', 'Manager'), ('prep_manager', 'Prep Manager'), ('sso_manager', 'SSO Manager'), ('parent', 'Parent'), ('counselor', 'Counselor'), ('user_manager', 'User Manager'), ('guest', 'Guest'), ('hod_reading', 'HOD Reading'), ('hod_writing', 'HOD Writing'), ('hod_math', 'HOD Math')], default='guest', max_length=64)),
                ('billing_address_country', models.CharField(default='INDIA', max_length=255)),
                ('billing_address', models.JSONField(null=True)),
                ('has_billing_address', models.BooleanField(default=False)),
                ('user_timezone', models.CharField(default='Asia/Kolkata', max_length=255)),
                ('last_active', models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ('last_login_time', models.DateTimeField(null=True)),
                ('last_logout_time', models.DateTimeField(null=True)),
                ('last_login_ip', models.CharField(blank=True, max_length=255)),
                ('last_logout_ip', models.CharField(blank=True, max_length=255)),
                ('last_login_medium', models.CharField(default='email', max_length=20)),
                ('last_login_uagent', models.TextField(blank=True)),
                ('token_updated_at', models.DateTimeField(null=True)),
                ('initial_assessments', models.JSONField(null=True)),
                ('initial_assessments_completed', models.JSONField(null=True)),
                ('mobile_verified', models.BooleanField(default=False)),
                ('mobile_otp', models.CharField(blank=True, max_length=255)),
                ('parent_1_name', models.CharField(blank=True, max_length=255)),
                ('parent_2_name', models.CharField(blank=True, max_length=255)),
                ('parent_1_email', models.CharField(blank=True, max_length=255)),
                ('parent_2_email', models.CharField(blank=True, max_length=255)),
                ('parent_1_mobile', models.CharField(blank=True, max_length=255)),
                ('parent_2_mobile', models.CharField(blank=True, max_length=255)),
                ('dob', models.DateField(null=True)),
                ('address', models.CharField(blank=True, max_length=255)),
                ('city', models.CharField(blank=True, max_length=255)),
                ('state', models.CharField(blank=True, max_length=255)),
                ('country', models.CharField(blank=True, max_length=255)),
                ('pincode', models.CharField(blank=True, max_length=255)),
                ('year_of_passing', models.CharField(blank=True, max_length=255)),
                ('timezone', models.CharField(blank=True, max_length=255)),
                ('test_results', models.JSONField(null=True)),
                ('referred_by', models.JSONField(null=True)),
                ('set_password_by_user', models.BooleanField(default=False)),
                ('whatsapp_number', models.CharField(blank=True, max_length=255)),
                ('starting_scores', models.JSONField(null=True)),
                ('goal_post', models.JSONField(null=True)),
                ('student_comments', models.CharField(blank=True, max_length=255)),
                ('parents_comments', models.CharField(blank=True, max_length=255)),
                ('sso_comments', models.CharField(blank=True, max_length=255)),
                ('bd_comments_enquiry', models.CharField(blank=True, max_length=255)),
                ('help', models.JSONField(null=True)),
                ('prep_navigation', models.JSONField(null=True)),
                ('day_schedule_user_id', models.CharField(blank=True, max_length=255)),
                ('tutor_type', models.CharField(choices=[('english', 'English'), ('math', 'Math'), ('english_reading', 'English_Reading'), ('english_writing', 'English_Writing')], default='english', max_length=64)),
                ('is_onboarded', models.BooleanField(default=False)),
                ('is_cpea_eligible', models.BooleanField(default=False)),
                ('total_class_per_day', models.IntegerField(default=2)),
                ('total_mega_domain_class_per_day', models.IntegerField(default=1)),
                ('is_english_reading_assigned', models.BooleanField(blank=True, default=False, null=True)),
                ('is_english_writing_assigned', models.BooleanField(blank=True, default=False, null=True)),
                ('is_math_assigned', models.BooleanField(blank=True, default=False, null=True)),
                ('isRepeater', models.BooleanField(blank=True, default=False, null=True)),
                ('tutor_slot', models.IntegerField(default=0)),
                ('counselors', models.ManyToManyField(blank=True, related_name='_db_user_counselors_+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Appointments',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('created_by_ip', models.CharField(max_length=20, null=True)),
                ('updated_by_ip', models.CharField(max_length=20, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('type', models.CharField(max_length=50, null=True)),
                ('is_completed', models.BooleanField(default=False)),
                ('zoom_link', models.TextField(null=True)),
                ('title', models.CharField(max_length=255, null=True)),
                ('start_at', models.DateTimeField(blank=True, null=True)),
                ('end_at', models.DateTimeField(blank=True, null=True)),
                ('duration', models.CharField(max_length=50, null=True)),
                ('timezone', models.CharField(max_length=50, null=True)),
                ('booking', models.CharField(max_length=100, null=True)),
                ('invitee_email', models.CharField(default=None, max_length=255, null=True)),
                ('resource_id', models.CharField(max_length=100, null=True)),
                ('invitee_id', models.IntegerField(default=0)),
                ('invitee_name', models.CharField(max_length=255, null=True)),
                ('ds_host_id', models.CharField(max_length=255, null=True)),
                ('host_name', models.CharField(max_length=255, null=True)),
                ('mega_domain', models.CharField(max_length=255, null=True)),
                ('host', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='host', to=settings.AUTH_USER_MODEL)),
                ('student', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='student', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'appointment',
            },
        ),
        migrations.CreateModel(
            name='Assessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('name', models.CharField(max_length=255)),
                ('description', models.JSONField(blank=True, null=True)),
                ('instructions', models.JSONField(blank=True, null=True)),
                ('cover_url', models.TextField(default=dict)),
                ('link', models.TextField(default=dict)),
                ('data', models.JSONField(default=dict)),
                ('kind', models.CharField(choices=[('MOCK', 'MOCK'), ('SECTIONAL', 'SECTIONAL'), ('MICRO', 'MICRO'), ('PRACTICE_SHEET', 'PRACTICE_SHEET'), ('DIAGNOSTIC', 'DIAGNOSTIC')], default='MOCK', max_length=255)),
                ('assessment_type', models.CharField(choices=[('STUDENT', 'STUDENT'), ('TUTOR', 'TUTOR'), ('EXTENDED', 'EXTENDED')], default='STUDENT', max_length=255)),
                ('state', models.CharField(choices=[('ACTIVE', 'ACTIVE'), ('ARCHIVED', 'ARCHIVED')], default='ACTIVE', max_length=255)),
                ('max_attempts', models.PositiveIntegerField(default=1)),
                ('english_sigma', models.FloatField(blank=True, null=True)),
                ('english_xbar', models.FloatField(blank=True, null=True)),
                ('math_sigma', models.FloatField(blank=True, null=True)),
                ('math_xbar', models.FloatField(blank=True, null=True)),
                ('assessment_sessions', models.TextField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AssessmentSection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('name', models.CharField(default='DEFAULT', max_length=255)),
                ('description', models.JSONField(default=dict)),
                ('instructions', models.JSONField(default=dict)),
                ('is_timed', models.BooleanField(default=False)),
                ('time_limit', models.IntegerField(default=0)),
                ('tools', models.JSONField(default=dict)),
                ('pre_screen', models.JSONField(default=dict)),
                ('post_screen', models.JSONField(default=dict)),
                ('sequence', models.FloatField(default=0)),
                ('layout', models.JSONField(default=dict)),
                ('data', models.JSONField(default=dict)),
                ('timers', models.JSONField(default=dict)),
                ('bubble_sheet_data', models.JSONField(default=dict)),
                ('bubble_sheet_questions', models.JSONField(default=dict)),
                ('bubble_sheet_answers', models.JSONField(default=dict)),
                ('paragraphs', models.JSONField(default=dict)),
                ('switching_route', models.JSONField(default=dict)),
                ('type', models.CharField(choices=[('STANDARD', 'STANDARD'), ('RANDOM', 'RANDOM'), ('ADAPTIVE', 'ADAPTIVE')], default='STANDARD', max_length=255)),
                ('assessment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assessment_sections', to='db.assessment')),
            ],
            options={
                'ordering': ['sequence'],
            },
        ),
        migrations.CreateModel(
            name='AssessmentTags',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'assessment_tags',
            },
        ),
        migrations.CreateModel(
            name='Assignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('name', models.TextField(blank=True)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('marks', models.IntegerField(default=0)),
                ('type', models.CharField(choices=[('HOME', 'HOME'), ('CLASS', 'CLASS'), ('PRACTICE_SHEET', 'PRACTICE_SHEET'), ('CPEA_R1', 'CPEA_R1'), ('CPEA_R2', 'CPEA_R2'), ('CPEA_R3', 'CPEA_R3'), ('CPEA_W1', 'CPEA_W1'), ('CPEA_W2', 'CPEA_W2'), ('CPEA_W3', 'CPEA_W3'), ('CPEA_M1', 'CPEA_M1'), ('CPEA_M2', 'CPEA_M2'), ('CPEA_M3', 'CPEA_M3')], default='PRACTICE_SHEET', max_length=255)),
                ('category', models.CharField(choices=[('r', 'R'), ('s', 'S'), ('t', 'T')], default='r', max_length=20)),
                ('sequence', models.IntegerField(default=0)),
                ('pdf_url', models.URLField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Assignment',
                'verbose_name_plural': 'Assignments',
                'db_table': 'assignment',
            },
        ),
        migrations.CreateModel(
            name='AssignmentQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('name', models.TextField(blank=True)),
                ('passage', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('sequence', models.IntegerField(default=0)),
                ('explanation', models.TextField(blank=True)),
                ('remarks', models.TextField(blank=True)),
                ('type', models.CharField(choices=[('MCQ', 'MCQ'), ('FIB', 'FIB'), ('TF', 'TF'), ('SPR', 'SPR')], default='MCQ', max_length=255)),
                ('enter_your_answer', models.TextField(blank=True, null=True)),
                ('assignment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignment_questions', to='db.assignment')),
            ],
            options={
                'verbose_name': 'AssignmentQuestion',
                'verbose_name_plural': 'AssignmentQuestions',
                'db_table': 'assignment_question',
            },
        ),
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('invitee_name', models.CharField(max_length=255)),
                ('invitee_email', models.EmailField(max_length=100)),
                ('start_at', models.CharField(max_length=100, null=True)),
                ('resource_id', models.CharField(max_length=100, null=True)),
                ('invitee_id', models.IntegerField(default=0)),
                ('booking', models.CharField(max_length=100, null=True)),
            ],
            options={
                'db_table': 'bookings',
            },
        ),
        migrations.CreateModel(
            name='ClassClassification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('type', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'class_classification',
            },
        ),
        migrations.CreateModel(
            name='Domain',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('sequence', models.IntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Domain',
                'verbose_name_plural': 'Domains',
                'db_table': 'domains',
            },
        ),
        migrations.CreateModel(
            name='EnglishCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('baseline_score', models.CharField(default='<550', max_length=20)),
                ('ca', models.CharField(choices=[('2ca', '2 CA'), ('3ca', '3 CA'), ('4ca', '4 CA')], default='2ca', max_length=20)),
                ('ha', models.CharField(choices=[('5ha', '5 HA'), ('6ha', '6 HA'), ('7ha', '7 HA')], default='5ha', max_length=20)),
                ('name', models.CharField(choices=[('r', 'R'), ('s', 'S'), ('t', 'T')], default='r', max_length=20)),
                ('difficulty', models.CharField(default='5', max_length=20)),
                ('short_desc', models.CharField(max_length=30)),
            ],
            options={
                'db_table': 'english_category',
            },
        ),
        migrations.CreateModel(
            name='Exam',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Exam',
                'verbose_name_plural': 'Exams',
                'db_table': 'exams',
            },
        ),
        migrations.CreateModel(
            name='FeedBack',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('comment', models.CharField(max_length=500)),
                ('commenter', models.CharField(max_length=255)),
                ('appointment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='appointments_feedback', to='db.appointments')),
                ('student', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='stundet_comment', to=settings.AUTH_USER_MODEL)),
                ('tutor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tutor_comment', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'feedbacks',
            },
        ),
        migrations.CreateModel(
            name='FeedbackQuestions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('question', models.CharField(max_length=500)),
                ('is_active', models.BooleanField(default=False)),
                ('type', models.CharField(choices=[('student', 'Student'), ('tutor', 'Tutor')], default='student', max_length=64)),
            ],
            options={
                'db_table': 'feedback_questions',
            },
        ),
        migrations.CreateModel(
            name='FileAsset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('asset', models.FileField(upload_to=zuperscore.db.models.library.get_file_upload_path)),
                ('attributes', models.JSONField(blank=True, default=dict)),
                ('context', models.CharField(choices=[('library', 'Library'), ('exams', 'Exams'), ('subjects', 'Subjects'), ('users', 'users'), ('sessions', 'sessions')], default='library', max_length=255)),
            ],
            options={
                'verbose_name': 'File Asset',
                'verbose_name_plural': 'File Assets',
                'db_table': 'library_assets',
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('name', models.CharField(max_length=255)),
                ('target_date', models.DateField(null=True)),
                ('status', models.BooleanField(default=False)),
                ('data', models.JSONField(blank=True, null=True)),
            ],
            options={
                'db_table': 'group',
            },
        ),
        migrations.CreateModel(
            name='MathCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('baseline_score', models.CharField(default='<550', max_length=20)),
                ('ca', models.CharField(choices=[('2ca', '2 CA'), ('3ca', '3 CA'), ('4ca', '4 CA')], default='2ca', max_length=20)),
                ('ha', models.CharField(choices=[('5ha', '5 HA'), ('6ha', '6 HA'), ('7ha', '7 HA')], default='5ha', max_length=20)),
                ('name', models.CharField(choices=[('r', 'R'), ('s', 'S'), ('t', 'T')], default='r', max_length=20)),
                ('difficulty', models.CharField(default='5', max_length=20)),
                ('short_desc', models.CharField(max_length=30)),
            ],
            options={
                'db_table': 'math_category',
            },
        ),
        migrations.CreateModel(
            name='MegaDomain',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('sequence', models.IntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'MegaDomain',
                'verbose_name_plural': 'MegaDomains',
                'db_table': 'mega_domains',
            },
        ),
        migrations.CreateModel(
            name='Module',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('sequence', models.IntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('mega_domain', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='modules', to='db.megadomain')),
            ],
            options={
                'verbose_name': 'Module',
                'verbose_name_plural': 'Modules',
                'db_table': 'modules',
            },
        ),
        migrations.CreateModel(
            name='Molecule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('title', models.CharField(max_length=100, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('sequence', models.IntegerField(default=0)),
                ('domain', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='domain_id', to='db.domain')),
                ('mega_domain', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mega_domain_id', to='db.megadomain')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PracticeSet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('name', models.CharField(max_length=255)),
                ('status', models.BooleanField(default=False)),
                ('data', models.JSONField(blank=True, null=True)),
            ],
            options={
                'db_table': 'practice_set',
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('title', models.TextField()),
                ('data', models.JSONField(default=dict)),
                ('is_active', models.BooleanField(default=True)),
                ('files', models.JSONField(default=dict)),
                ('timers', models.JSONField(default=dict)),
                ('assets', models.JSONField(default=dict)),
                ('score', models.IntegerField(default=0)),
                ('explanation', models.JSONField(default=dict)),
                ('feedback', models.TextField(default=dict)),
                ('type', models.CharField(choices=[('MCQ', 'MCQ'), ('FIB', 'FIB'), ('TF', 'TF'), ('SPR', 'SPR')], default='MCQ', max_length=255)),
                ('calculator', models.CharField(choices=[('', ''), ('yes', 'yes'), ('no', 'no')], default='', max_length=255)),
                ('content', models.JSONField(default=dict)),
                ('passage', models.JSONField(blank=True, null=True)),
                ('approvers_difficulty', models.PositiveSmallIntegerField(default=0)),
                ('statistical_difficulty', models.PositiveSmallIntegerField(default=0)),
                ('used_in', models.JSONField(default=dict)),
                ('decision', models.PositiveSmallIntegerField(default=0)),
                ('sourced_from', models.CharField(default='ZUPERSCORE', max_length=255)),
                ('remarks', models.CharField(blank=True, max_length=255)),
                ('irt_a', models.FloatField(default=0)),
                ('irt_b', models.FloatField(default=0)),
                ('irt_c', models.FloatField(default=0)),
                ('weight', models.FloatField(default=1.0)),
                ('blume_taxonomy', models.JSONField(default=dict)),
                ('approved_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='approved_questions', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_questions', to=settings.AUTH_USER_MODEL)),
                ('domain', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='question_domain', to='db.domain')),
                ('exam', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='question_exam', to='db.exam')),
                ('mega_domain', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='question_mega_domain', to='db.megadomain')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='db.question')),
            ],
            options={
                'db_table': 'questions',
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='QuestionOption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('name', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_correct', models.BooleanField(default=False)),
                ('sequence', models.IntegerField(default=0)),
                ('questions', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='question_options', to='db.assignmentquestion')),
            ],
            options={
                'verbose_name': 'QuestionOption',
                'verbose_name_plural': 'QuestionOptions',
                'db_table': 'question_option',
            },
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('school_name', models.CharField(blank=True, max_length=255)),
                ('school_city', models.CharField(blank=True, max_length=255)),
                ('school_state', models.CharField(blank=True, max_length=255)),
                ('school_country', models.CharField(blank=True, max_length=255)),
                ('school_curriculum', models.CharField(choices=[('ib', 'IB'), ('gcse', 'GSSE'), ('cbse', 'CBSE'), ('isc', 'ISC'), ('state_board', 'State Board'), ('american_curriculum', 'American Curriculum'), ('ap_curriculum', 'AP Curriculum'), ('level', 'Level')], default='ib', max_length=255)),
                ('school_type', models.CharField(choices=[('boarding', 'Boarding'), ('day_school', 'Day School'), ('weekly_boarding', 'Weekly Boarding')], default='boarding', max_length=255)),
            ],
            options={
                'db_table': 'db_school',
                'ordering': ('school_name',),
            },
        ),
        migrations.CreateModel(
            name='SessionPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('sequence', models.IntegerField(default=0)),
                ('mega_domain', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='session_plan', to='db.megadomain')),
            ],
            options={
                'verbose_name': 'SessionPlan',
                'verbose_name_plural': 'SessionPlans',
                'db_table': 'session_plan',
            },
        ),
        migrations.CreateModel(
            name='Settings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('disabled_mistake_analyzer', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StudentAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('name', models.TextField(blank=True)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('marks', models.IntegerField(default=0)),
                ('type', models.CharField(choices=[('HOME', 'HOME'), ('CLASS', 'CLASS')], default='CLASS', max_length=255)),
                ('is_visible', models.BooleanField(default=False)),
                ('is_completed', models.BooleanField(default=False)),
                ('assignment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='student_assignments', to='db.assignment')),
                ('domain', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='student_assignments', to='db.domain')),
                ('megadomain', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='student_assignments', to='db.megadomain')),
                ('module', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='student_assignments', to='db.module')),
                ('student', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='student_assignments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'StudentAssignment',
                'verbose_name_plural': 'StudentAssignments',
                'db_table': 'student_assignment',
            },
        ),
        migrations.CreateModel(
            name='StudentAssignmentQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('name', models.TextField(blank=True)),
                ('passage', models.TextField(blank=True)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('marks', models.IntegerField(default=0)),
                ('sequence', models.IntegerField(default=0)),
                ('type', models.CharField(choices=[('MCQ', 'MCQ'), ('FIB', 'FIB'), ('TF', 'TF'), ('SPR', 'SPR')], default='MCQ', max_length=255)),
                ('assignment_question', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='student_assignment_questions', to='db.assignmentquestion')),
                ('student', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='student_assignment_questions', to=settings.AUTH_USER_MODEL)),
                ('student_assignment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='student_assignment_questions', to='db.studentassignment')),
            ],
            options={
                'verbose_name': 'StudentAssignmentQuestion',
                'verbose_name_plural': 'StudentAssignmentQuestions',
                'db_table': 'student_assignment_question',
            },
        ),
        migrations.CreateModel(
            name='StudentCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('baseline_score', models.CharField(default='<550', max_length=20)),
                ('ca', models.CharField(choices=[('2ca', '2 CA'), ('3ca', '3 CA'), ('4ca', '4 CA')], default='2ca', max_length=20)),
                ('ha', models.CharField(choices=[('5ha', '5 HA'), ('6ha', '6 HA'), ('7ha', '7 HA')], default='5ha', max_length=20)),
                ('name', models.CharField(choices=[('r', 'R'), ('s', 'S'), ('t', 'T')], default='r', max_length=20)),
                ('difficulty', models.CharField(default='5', max_length=20)),
                ('short_desc', models.CharField(max_length=30)),
            ],
            options={
                'db_table': 'student_category',
            },
        ),
        migrations.CreateModel(
            name='StudentDomain',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('sequence', models.IntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('domain', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='student_domain', to='db.domain')),
                ('student', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='student_domain', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'StudentDomain',
                'verbose_name_plural': 'StudentDomains',
                'db_table': 'student_domain',
            },
        ),
        migrations.CreateModel(
            name='StudentQuestionOption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('name', models.TextField(blank=True)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_correct', models.BooleanField(default=False)),
                ('sequence', models.IntegerField(default=0)),
                ('question_option', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='student_question_options', to='db.questionoption')),
                ('student', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='student_question_options', to=settings.AUTH_USER_MODEL)),
                ('student_assignment_question', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='student_question_options', to='db.studentassignmentquestion')),
            ],
            options={
                'verbose_name': 'StudentQuestionOption',
                'verbose_name_plural': 'StudentQuestionOptions',
                'db_table': 'student_question_option',
            },
        ),
        migrations.CreateModel(
            name='SubjectNode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('path', models.CharField(max_length=255, unique=True)),
                ('depth', models.PositiveIntegerField()),
                ('numchild', models.PositiveIntegerField(default=0)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('props', models.JSONField(null=True)),
                ('is_active', models.BooleanField(default=False)),
                ('kind', models.CharField(choices=[('subject', 'Subject'), ('topic', 'Topic')], max_length=255)),
                ('data', models.JSONField(null=True)),
                ('visible', models.BooleanField(default=True)),
                ('state', models.CharField(choices=[('ACTIVE', 'ACTIVE'), ('ARCHIVED', 'ARCHIVED')], default='ACTIVE', max_length=255)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Target_Test_Date',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('date', models.DateField()),
            ],
            options={
                'db_table': 'target_test_dates',
            },
        ),
        migrations.CreateModel(
            name='TestAllocationLogger',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('kind', models.CharField(choices=[('MOCK', 'MOCK'), ('SECTIONAL', 'SECTIONAL'), ('MICRO', 'MICRO'), ('PRACTICE_SHEET', 'PRACTICE_SHEET')], default='MOCK', max_length=255)),
                ('scheduled_at', models.DateTimeField(blank=True, null=True)),
                ('assessment', models.ManyToManyField(blank=True, related_name='assessments', to='db.Assessment')),
            ],
            options={
                'db_table': 'test_allocation_logger',
            },
        ),
        migrations.CreateModel(
            name='UserAssessmentSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('data', models.JSONField(default=dict)),
                ('is_submitted', models.BooleanField(default=False)),
                ('is_reviewed', models.BooleanField(default=False)),
                ('is_started', models.BooleanField(default=False)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('submitted_at', models.DateTimeField(blank=True, null=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('total_time', models.PositiveIntegerField(default=0)),
                ('total_marks', models.PositiveIntegerField(default=0)),
                ('total_questions', models.IntegerField(default=0)),
                ('total_correct', models.IntegerField(default=0)),
                ('total_incorrect', models.IntegerField(default=0)),
                ('total_answered', models.IntegerField(default=0)),
                ('total_unanswered', models.IntegerField(default=0)),
                ('total_visited', models.IntegerField(default=0)),
                ('total_unvisited', models.IntegerField(default=0)),
                ('total_unattempted', models.IntegerField(default=0)),
                ('section_analysis_data', models.JSONField(default=dict)),
                ('total_correct_qids', models.JSONField(default=dict)),
                ('total_incorrect_qids', models.JSONField(default=dict)),
                ('total_unanswered_qids', models.JSONField(default=dict)),
                ('total_visited_qids', models.JSONField(default=dict)),
                ('total_unvisited_qids', models.JSONField(default=dict)),
                ('total_answered_qids', models.JSONField(default=dict)),
                ('is_pscale_success', models.BooleanField(default=False)),
                ('pscale_data', models.JSONField(default=dict)),
                ('section_question_data', models.JSONField(default=dict)),
                ('section_info_data', models.JSONField(default=dict)),
                ('section_time_data', models.JSONField(default=dict)),
                ('section_marks_data', models.JSONField(default=dict)),
                ('generated_by', models.JSONField(blank=True, null=True)),
                ('is_resume_enabled', models.BooleanField(default=False)),
                ('state', models.CharField(choices=[('UNTOUCHED', 'UNTOUCHED'), ('STARTED', 'STARTED'), ('IN_PROGRESS', 'IN_PROGRESS'), ('COMPLETED', 'COMPLETED'), ('CANCELLED', 'CANCELLED'), ('ARCHIVED', 'ARCHIVED'), ('ANALYSED', 'ANALYSED')], default='UNTOUCHED', max_length=255)),
                ('scheduled_at', models.DateTimeField(blank=True, null=True)),
                ('assessment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_assessment_sessions', to='db.assessment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_assessment_sessions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WeeklyProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('start_date', models.DateField(null=True)),
                ('end_date', models.DateField(null=True)),
                ('progress', models.JSONField(blank=True, null=True)),
                ('core_class', models.IntegerField(default=0)),
                ('doubts_class', models.IntegerField(default=0)),
                ('strategy_class', models.IntegerField(default=0)),
                ('sectional_class', models.IntegerField(default=0)),
                ('reading_articles', models.IntegerField(default=0)),
                ('mock_tests', models.IntegerField(default=0)),
                ('practice_sheet', models.IntegerField(default=0)),
                ('analyse', models.IntegerField(default=0)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='weekly_progress_user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'weekly_progress',
            },
        ),
        migrations.CreateModel(
            name='UserAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('type', models.CharField(blank=True, max_length=255, null=True)),
                ('is_bookmark', models.BooleanField(default=False)),
                ('data', models.JSONField(default=dict)),
                ('extra', models.JSONField(default=dict)),
                ('info', models.JSONField(default=dict)),
                ('time_taken', models.JSONField(default=dict)),
                ('is_visited', models.BooleanField(default=False)),
                ('masked_options', models.JSONField(default=dict)),
                ('is_answered', models.BooleanField(default=False)),
                ('analysis_data', models.JSONField(default=dict)),
                ('stat', models.CharField(choices=[('ORIGIN', 'ORIGIN'), ('MIGRATED', 'MIGRATED'), ('DESKTOP', 'DESKTOP')], default='ORIGIN', max_length=255)),
                ('assessment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assessment_attempts', to='db.assessment')),
                ('question', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='assessment_attempts', to='db.question')),
                ('section', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assessment_attempts', to='db.assessmentsection')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assessment_attempts', to='db.userassessmentsession')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assessment_attempts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TutorAvailability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('slot', models.IntegerField(default=0)),
                ('total_week_supply', models.IntegerField(default=0)),
                ('total_weekly_load', models.IntegerField(default=0)),
                ('remaining_weekly_supply', models.IntegerField(default=0)),
                ('total_monthly_load', models.IntegerField(default=0)),
                ('tutor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tutor_availability', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'tutor_availablity',
            },
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('sequence', models.IntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('domain', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='topics', to='db.domain')),
            ],
            options={
                'verbose_name': 'Topic',
                'verbose_name_plural': 'Topics',
                'db_table': 'topics',
            },
        ),
        migrations.CreateModel(
            name='TimeAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('time_taken', models.JSONField(default=dict)),
                ('data', models.JSONField(default=dict)),
                ('type', models.CharField(choices=[('QUESTION', 'Question'), ('PRACTICE_SHEET', 'Practice_Sheet'), ('CPEA_SHEET', 'Cpea_Sheet')], max_length=20)),
                ('is_visited', models.BooleanField(default=False)),
                ('is_answered', models.BooleanField(default=False)),
                ('assignment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='time_analytics_assignment', to='db.assignment')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='time_analytics_user', to=settings.AUTH_USER_MODEL)),
                ('student_assignment_question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='time_analytics_assignment_question', to='db.studentassignmentquestion')),
                ('student_question_option', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='time_analytics_question_option', to='db.studentquestionoption')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TestAllocationPracticeSetAssessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('assessment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='test_allocation_set_assessment', to='db.assessment')),
                ('practice_set', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='test_allocation_practice_set', to='db.practiceset')),
                ('test_allocation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='test_allocation_set', to='db.testallocationlogger')),
            ],
            options={
                'db_table': 'test_allocation_practice_set_assessment',
            },
        ),
        migrations.CreateModel(
            name='TestAllocationGroupUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='test_allocation_groups', to='db.group')),
                ('test_allocation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='test_allocation_group_user', to='db.testallocationlogger')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='test_allocation_users', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'test_allocation_group_user',
            },
        ),
        migrations.CreateModel(
            name='SubTopic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('sequence', models.IntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('practice_sheet', models.URLField(blank=True, null=True)),
                ('topic', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subtopics', to='db.topic')),
            ],
            options={
                'verbose_name': 'SubTopic',
                'verbose_name_plural': 'SubTopics',
                'db_table': 'subtopics',
            },
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('mega_domain', models.BooleanField(default=False)),
                ('exam', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subjects', to='db.exam')),
            ],
            options={
                'verbose_name': 'Subject',
                'verbose_name_plural': 'Subjects',
                'db_table': 'subjects',
            },
        ),
        migrations.CreateModel(
            name='StudentTopic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('sequence', models.IntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('student', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='student_topic', to=settings.AUTH_USER_MODEL)),
                ('student_domain', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_topic', to='db.studentdomain')),
                ('topic', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='student_topic', to='db.topic')),
            ],
            options={
                'verbose_name': 'StudentTopic',
                'verbose_name_plural': 'StudentTopics',
                'db_table': 'student_topic',
            },
        ),
        migrations.CreateModel(
            name='StudentTeam',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('type', models.CharField(choices=[('PRIMARY', 'Primary'), ('SECONDARY', 'Secondary')], max_length=20)),
                ('is_active_tutor', models.BooleanField(default=False)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='students', to=settings.AUTH_USER_MODEL)),
                ('tutor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tutors', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'student_teams',
            },
        ),
        migrations.CreateModel(
            name='StudentSubTopic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('content', models.TextField(blank=True)),
                ('sequence', models.IntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('is_extra', models.BooleanField(default=False)),
                ('time', models.CharField(default='15', max_length=20)),
                ('practice_sheet', models.URLField(blank=True, null=True)),
                ('student', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='student_subtopic', to=settings.AUTH_USER_MODEL)),
                ('student_topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_subtopic', to='db.studenttopic')),
                ('sub_topic', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='student_subtopic', to='db.subtopic')),
            ],
            options={
                'verbose_name': 'StudentSubTopic',
                'verbose_name_plural': 'StudentSubTopics',
                'db_table': 'student_subtopic',
            },
        ),
        migrations.CreateModel(
            name='StudentSessionPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('category', models.CharField(choices=[('r', 'R'), ('s', 'S'), ('t', 'T')], default='r', max_length=20)),
                ('corePrep', models.DateField(null=True)),
                ('targetTest', models.DateField(null=True)),
                ('mega_domain', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='student_session_plan', to='db.megadomain')),
                ('session_plan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='student_session_plan', to='db.sessionplan')),
                ('student', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='student_session_plan', to=settings.AUTH_USER_MODEL)),
                ('subject', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='student_session_plan', to='db.subject')),
            ],
            options={
                'verbose_name': 'StudentSession',
                'verbose_name_plural': 'StudentSessions',
                'db_table': 'student_session',
            },
        ),
        migrations.CreateModel(
            name='StudentModule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('sequence', models.IntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('module', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='student_module', to='db.module')),
                ('student', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='student_module', to=settings.AUTH_USER_MODEL)),
                ('student_session', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='student_module', to='db.studentsessionplan')),
            ],
            options={
                'verbose_name': 'StudentModule',
                'verbose_name_plural': 'StudentModules',
                'db_table': 'student_module',
            },
        ),
        migrations.CreateModel(
            name='StudentJourney',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('completion_date', models.DateTimeField(null=True)),
                ('class_type', models.CharField(choices=[('Core_prep', 'Core Prep'), ('CPEA', 'CPEA'), ('Group_class', 'Group Class')], max_length=500)),
                ('appointment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appointment_student_journey', to='db.appointments')),
            ],
            options={
                'db_table': 'student_journey',
            },
        ),
        migrations.CreateModel(
            name='StudentGroupEvents',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('event_id', models.CharField(max_length=100)),
                ('class_name', models.CharField(default=None, max_length=500, null=True)),
                ('tutor_name', models.CharField(max_length=100)),
                ('subject', models.CharField(max_length=100)),
                ('is_taken', models.BooleanField(default=False, null=True)),
                ('is_sso_verified', models.BooleanField(default=False, null=True)),
                ('target_test_date', models.DateField(null=True)),
                ('group_id', models.CharField(default=None, max_length=200, null=True)),
                ('deptHead', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='deptHead', to=settings.AUTH_USER_MODEL)),
                ('sso', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sso', to=settings.AUTH_USER_MODEL)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='StudentGroupEvents', to=settings.AUTH_USER_MODEL)),
                ('tutor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='StudentGroupEventTutor', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'student_group_events',
            },
        ),
        migrations.AddField(
            model_name='studentdomain',
            name='student_session',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='student_session', to='db.studentsessionplan'),
        ),
        migrations.CreateModel(
            name='StudentCpeaReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('status', models.CharField(choices=[('Pass', 'Pass'), ('Fail', 'Fail'), ('Result_Awaited', 'Result_Awaited')], default='Result_Awaited', max_length=20)),
                ('answers', models.JSONField(default=dict)),
                ('overall_feedback', models.CharField(default=None, max_length=500, null=True)),
                ('is_student_view', models.BooleanField(default=False)),
                ('appointment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db.appointments')),
                ('assignment', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='db.assignment')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cpea_reports', to=settings.AUTH_USER_MODEL)),
                ('tutor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cpea_tutor_reports', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'student_cpea_reports',
            },
        ),
        migrations.CreateModel(
            name='StudentClasses',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('is_cpea_enabled', models.BooleanField(default=False)),
                ('is_core_prep_enabled', models.BooleanField(default=False)),
                ('is_group_class_enabled', models.BooleanField(default=False)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_class', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'student_classes',
            },
        ),
        migrations.CreateModel(
            name='StudentAvailability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('start_date', models.DateField(null=True)),
                ('end_date', models.DateField(null=True)),
                ('type', models.CharField(max_length=100, null=True)),
                ('target_test_date_1', models.DateField(null=True)),
                ('target_test_date_2', models.DateField(null=True)),
                ('target_test_date_3', models.DateField(null=True)),
                ('target_test_date_4', models.DateField(null=True)),
                ('core_prep_date', models.DateField(null=True)),
                ('total_days', models.IntegerField(default=0)),
                ('student', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='student_availablity', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'student_availability',
            },
        ),
        migrations.AddField(
            model_name='studentassignment',
            name='subject',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='student_assignments', to='db.subject'),
        ),
        migrations.AddField(
            model_name='studentassignment',
            name='subtopic',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='student_assignments', to='db.subtopic'),
        ),
        migrations.AddField(
            model_name='studentassignment',
            name='topic',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='student_assignments', to='db.topic'),
        ),
        migrations.AddField(
            model_name='sessionplan',
            name='subject',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='session_plan', to='db.subject'),
        ),
        migrations.CreateModel(
            name='SectionQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('data', models.JSONField(default=dict)),
                ('blocks', models.JSONField(default=dict)),
                ('questions', models.JSONField(default=dict)),
                ('sequence', models.FloatField(default=0)),
                ('layout', models.JSONField(default=dict)),
                ('order', models.IntegerField(default=0)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='section_questions', to='db.question')),
                ('section', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='section_questions', to='db.assessmentsection')),
            ],
            options={
                'ordering': ('sequence',),
            },
        ),
        migrations.CreateModel(
            name='ReasonForError',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reason_for_error', to='db.topic')),
            ],
            options={
                'verbose_name': 'ReasonForError',
                'verbose_name_plural': 'ReasonForErrors',
                'db_table': 'reason_for_errors',
            },
        ),
        migrations.AddField(
            model_name='question',
            name='sub_topic',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='question_sub_topic', to='db.subtopic'),
        ),
        migrations.AddField(
            model_name='question',
            name='subject',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='question_subject', to='db.subject'),
        ),
        migrations.AddField(
            model_name='question',
            name='topic',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='question_topic', to='db.topic'),
        ),
        migrations.CreateModel(
            name='PracticeSetAssessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('assessment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='set_assessment', to='db.assessment')),
                ('practice_set', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='practice_set', to='db.practiceset')),
            ],
            options={
                'db_table': 'practice_set_assessment',
            },
        ),
        migrations.CreateModel(
            name='Option',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('hash', models.CharField(max_length=255)),
                ('data', models.JSONField(default=dict)),
                ('sequence', models.FloatField(default=0)),
                ('assets', models.JSONField(default=dict)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='options', to='db.question')),
            ],
            options={
                'db_table': 'options',
                'ordering': ('sequence',),
            },
        ),
        migrations.CreateModel(
            name='MotherSessionMolecule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('name', models.CharField(default='Session Plan', max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('molecule', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='mother_session_molecule_id', to='db.molecule')),
                ('session_plan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='mother_session_molecule_id', to='db.sessionplan')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MoleculeTopicSubtopic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('molecule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='moleculetopicsubtopic_id', to='db.molecule')),
                ('subtopic', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='moleculetopicsubtopic_id', to='db.subtopic')),
                ('topic', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='moleculetopicsubtopic_id', to='db.topic')),
            ],
            options={
                'verbose_name': 'MoleculeTopicSubtopic',
                'verbose_name_plural': 'MoleculeTopicSubtopics',
                'db_table': 'molecule_topic_subtopic',
            },
        ),
        migrations.AddField(
            model_name='molecule',
            name='subject',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subject_id', to='db.subject'),
        ),
        migrations.AddField(
            model_name='module',
            name='session_plan',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='modules', to='db.sessionplan'),
        ),
        migrations.AddField(
            model_name='megadomain',
            name='subject',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='mega_domains', to='db.subject'),
        ),
        migrations.CreateModel(
            name='GroupUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='groups', to='db.group')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='users', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'group_user',
            },
        ),
        migrations.CreateModel(
            name='FeedbackQuestionRating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('rating', models.IntegerField()),
                ('feedback', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='question_ratings', to='db.feedback')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db.feedbackquestions')),
            ],
            options={
                'db_table': 'feedback_question_ratings',
            },
        ),
        migrations.AddField(
            model_name='domain',
            name='mega_domain',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='domains', to='db.megadomain'),
        ),
        migrations.AddField(
            model_name='domain',
            name='module',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='domains', to='db.module'),
        ),
        migrations.AddField(
            model_name='domain',
            name='subject',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='domains', to='db.subject'),
        ),
        migrations.CreateModel(
            name='CpeaReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('cpea_question', models.CharField(max_length=150)),
                ('remedial_action', models.CharField(blank=True, max_length=150, null=True)),
                ('mega_domain', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cpea_report_mega_domian', to='db.megadomain')),
            ],
            options={
                'verbose_name': 'CPEA Report',
                'verbose_name_plural': 'CPEA Reports',
                'db_table': 'cpea_reports',
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('comment', models.CharField(blank=True, max_length=500)),
                ('type', models.CharField(choices=[('student', 'Student'), ('parent', 'Parent')], default='parent', max_length=255)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='student_id', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'comments',
            },
        ),
        migrations.CreateModel(
            name='Attendee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('type', models.CharField(max_length=50)),
                ('appointment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appointments', to='db.appointments')),
                ('attendee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'attendee',
            },
        ),
        migrations.AddField(
            model_name='assignment',
            name='subTopic',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='db.subtopic'),
        ),
        migrations.AddField(
            model_name='assignment',
            name='subject',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subjects', to='db.subject'),
        ),
        migrations.AddField(
            model_name='assessment',
            name='domain',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='assessment_domain', to='db.domain'),
        ),
        migrations.AddField(
            model_name='assessment',
            name='exam',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='assessment_exam', to='db.exam'),
        ),
        migrations.AddField(
            model_name='assessment',
            name='mega_domain',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='assessment_mega_domain', to='db.megadomain'),
        ),
        migrations.AddField(
            model_name='assessment',
            name='subject',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='assessment_subject', to='db.subject'),
        ),
        migrations.AddField(
            model_name='assessment',
            name='tags',
            field=models.ManyToManyField(blank=True, related_name='assessment_tags', to='db.AssessmentTags'),
        ),
        migrations.AddField(
            model_name='assessment',
            name='topic',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='assessment_topic', to='db.topic'),
        ),
        migrations.AddField(
            model_name='appointments',
            name='subject',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='app_subject', to='db.subject'),
        ),
        migrations.CreateModel(
            name='AppointmentReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('is_student_joined', models.BooleanField(default=False)),
                ('is_tutor_joined', models.BooleanField(default=False)),
                ('reason', models.CharField(choices=[('TUTOR_NOT_JOINED', 'Tutor_not_joined'), ('STUDENT_NOT_JOINED', 'Student_not_joined'), ('CANCEL', 'Cancel'), ('RESCHEDULE', 'Reshedule')], max_length=100)),
                ('appointment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appointment_reports', to='db.appointments')),
            ],
            options={
                'db_table': 'appointment_reports',
            },
        ),
        migrations.CreateModel(
            name='AppointmentMolecule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('is_completed', models.BooleanField(default=False)),
                ('appointment', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='appointment', to='db.appointments')),
                ('molecule', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='molecule', to='db.molecule')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='user',
            name='english_category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='english_category', to='db.englishcategory'),
        ),
        migrations.AddField(
            model_name='user',
            name='english_reading_tutors',
            field=models.ManyToManyField(blank=True, related_name='_db_user_english_reading_tutors_+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='user',
            name='english_tutors',
            field=models.ManyToManyField(blank=True, related_name='_db_user_english_tutors_+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='user',
            name='english_writing_tutors',
            field=models.ManyToManyField(blank=True, related_name='_db_user_english_writing_tutors_+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='math_category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='math_category', to='db.mathcategory'),
        ),
        migrations.AddField(
            model_name='user',
            name='math_tutors',
            field=models.ManyToManyField(blank=True, related_name='_db_user_math_tutors_+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='user',
            name='ops_managers',
            field=models.ManyToManyField(blank=True, related_name='_db_user_ops_managers_+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='user',
            name='parents',
            field=models.ManyToManyField(blank=True, related_name='_db_user_parents_+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='user',
            name='prep_managers',
            field=models.ManyToManyField(blank=True, related_name='_db_user_prep_managers_+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='user',
            name='school',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='school', to='db.school'),
        ),
        migrations.AddField(
            model_name='user',
            name='sso_managers',
            field=models.ManyToManyField(blank=True, related_name='_db_user_sso_managers_+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='QuestionNode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Modified At')),
                ('data', models.JSONField(default=dict)),
                ('sequence', models.FloatField(default=0)),
                ('node', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='question_nodes', to='db.subjectnode')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='question_nodes', to='db.question')),
            ],
            options={
                'ordering': ('sequence', 'created_at'),
                'unique_together': {('question', 'node')},
            },
        ),
    ]
